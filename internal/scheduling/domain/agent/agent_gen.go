// Code generated by ddd-domain-gen, DO NOT EDIT.
package agent

import (
	"errors"
	"reflect"
)

// Generators ...

// New returns a guaranteed-to-be-valid Agent or an error
func New(uuid string, name string) (*Agent, error) {
	if reflect.ValueOf(uuid).IsZero() {
		return nil, errors.New("missing UUID")
	}
	if reflect.ValueOf(name).IsZero() {
		return nil, errors.New("missing name")
	}
	a := &Agent{
		name: name,
		uuid: uuid,
	}
	return a, nil
}

// MustNew returns a guaranteed-to-be-valid Agent or panics
func MustNew(uuid string, name string) *Agent {
	a, err := New(uuid, name)
	if err != nil {
		panic(err)
	}
	return a
}

// Marshalers ...

// UnmarshalFromRepository unmarshals Agent from the repository so that non-constructable
// private fields can still be initialized from (private) repository state
//
// Important: DO NEVER USE THIS METHOD EXCEPT FROM THE REPOSITORY
// Reason: This method initializes private state, so you could corrupt the domain.
func UnmarshalFromRepository(uuid string, name string) *Agent {
	a := MustNew(uuid, name)
	return a
}
