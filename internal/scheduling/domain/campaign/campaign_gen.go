// Code generated by ddd-domain-gen, DO NOT EDIT.
package campaign

import (
	"fmt"
	gouuid "github.com/satori/go.uuid"
)

// Constructors ...

// New returns a guaranteed-to-be-valid Campaign or an error
func New(uuid gouuid.UUID, name string, priority priority) (*Campaign, error) {
	c := &Campaign{
		name:     name,
		priority: priority,
		uuid:     uuid,
	}
	return c, nil
}

// MustNew returns a guaranteed-to-be-valid Campaign or panics
func MustNew(uuid gouuid.UUID, name string, priority priority) *Campaign {
	c, err := New(uuid, name, priority)
	if err != nil {
		panic(err)
	}
	return c
}

// Marshalers ...

// UnmarshalFromRepository unmarshals Campaign from the repository so that non-constructable
// private fields can still be initialized from (private) repository state
//
// Important: DO NEVER USE THIS METHOD EXCEPT FROM THE REPOSITORY
// Reason: This method initializes private state, so you could corrupt the domain.
func UnmarshalFromRepository(uuid gouuid.UUID, name string, priority priority) *Campaign {
	c := MustNew(uuid, name, priority)
	return c
}

// Accessors ...

// Uuid returns uuid value
func (c *Campaign) Uuid() gouuid.UUID {
	return c.uuid
}

// Name returns name value
func (c *Campaign) Name() string {
	return c.name
}

// Priority returns priority value
func (c *Campaign) Priority() priority {
	return c.priority
}

// Utilities ...

// Equal answers whether v is equivalent to c
// Always returns false if v is not a Campaign
func (c Campaign) Equal(v interface{}) bool {
	other, ok := v.(Campaign)
	if !ok {
		return false
	}
	return c
}

// String implements the fmt.Stringer interface and returns the native format of Campaign
func (c Campaign) String() string {
	return fmt.Sprintf("")
}
