// Code generated by ddd-domain-gen, DO NOT EDIT.
package call

import (
	"fmt"
	local "github.com/xoe-labs/vicidial-go/internal/common/party/local"
	remote "github.com/xoe-labs/vicidial-go/internal/common/party/remote"
)

// Constructors ...

// New returns a guaranteed-to-be-valid Call or an error
func New(meta meta, remoteParty remote.RemoteParty, localParty local.LocalParty) (*Call, error) {
	c := &Call{
		localParty:  localParty,
		meta:        meta,
		remoteParty: remoteParty,
	}
	return c, nil
}

// MustNew returns a guaranteed-to-be-valid Call or panics
func MustNew(meta meta, remoteParty remote.RemoteParty, localParty local.LocalParty) *Call {
	c, err := New(meta, remoteParty, localParty)
	if err != nil {
		panic(err)
	}
	return c
}

// Marshalers ...

// UnmarshalFromRepository unmarshals Call from the repository so that non-constructable
// private fields can still be initialized from (private) repository state
//
// Important: DO NEVER USE THIS METHOD EXCEPT FROM THE REPOSITORY
// Reason: This method initializes private state, so you could corrupt the domain.
func UnmarshalFromRepository(meta meta, remoteParty remote.RemoteParty, localParty local.LocalParty) *Call {
	c := MustNew(meta, remoteParty, localParty)
	return c
}

// Accessors ...

// Utilities ...

// Equal answers whether v is equivalent to c
// Always returns false if v is not a Call
func (c Call) Equal(v interface{}) bool {
	other, ok := v.(Call)
	if !ok {
		return false
	}
	return c
}

// String implements the fmt.Stringer interface and returns the native format of Call
func (c Call) String() string {
	return fmt.Sprintf("")
}
