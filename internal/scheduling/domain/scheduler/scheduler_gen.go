// Code generated by ddd-domain-gen, DO NOT EDIT.
package scheduler

import (
	"errors"
	"fmt"
	gouuid "github.com/satori/go.uuid"
	agent "github.com/xoe-labs/vicidial-go/internal/scheduling/domain/agent"
	call "github.com/xoe-labs/vicidial-go/internal/scheduling/domain/call"
	campaign "github.com/xoe-labs/vicidial-go/internal/scheduling/domain/campaign"
	leadqueryfilter "github.com/xoe-labs/vicidial-go/internal/scheduling/domain/leadqueryfilter"
	"reflect"
)

// Constructors ...

// New returns a guaranteed-to-be-valid Scheduler or an error
func New(uuid gouuid.UUID, name string, coveredCampaigns []campaign.Campaign, callQueueMinSize int, leadQueryFilter leadqueryfilter.LeadQueryFilter, assignedAgents []agent.Agent) (*Scheduler, error) {
	if reflect.ValueOf(uuid).IsZero() {
		return nil, errors.New("missing UUID")
	}
	if reflect.ValueOf(name).IsZero() {
		return nil, errors.New("missing name")
	}
	s := &Scheduler{
		assignedAgents:   assignedAgents,
		callQueueMinSize: callQueueMinSize,
		coveredCampaigns: coveredCampaigns,
		leadQueryFilter:  leadQueryFilter,
		name:             name,
		uuid:             uuid,
	}
	return s, nil
}

// MustNew returns a guaranteed-to-be-valid Scheduler or panics
func MustNew(uuid gouuid.UUID, name string, coveredCampaigns []campaign.Campaign, callQueueMinSize int, leadQueryFilter leadqueryfilter.LeadQueryFilter, assignedAgents []agent.Agent) *Scheduler {
	s, err := New(uuid, name, coveredCampaigns, callQueueMinSize, leadQueryFilter, assignedAgents)
	if err != nil {
		panic(err)
	}
	return s
}

// Marshalers ...

// UnmarshalFromRepository unmarshals Scheduler from the repository so that non-constructable
// private fields can still be initialized from (private) repository state
//
// Important: DO NEVER USE THIS METHOD EXCEPT FROM THE REPOSITORY
// Reason: This method initializes private state, so you could corrupt the domain.
func UnmarshalFromRepository(uuid gouuid.UUID, name string, coveredCampaigns []campaign.Campaign, callQueueMinSize int, leadQueryFilter leadqueryfilter.LeadQueryFilter, assignedAgents []agent.Agent, callQueue []call.Call) *Scheduler {
	s := MustNew(uuid, name, coveredCampaigns, callQueueMinSize, leadQueryFilter, assignedAgents)
	s.callQueue = callQueue
	return s
}

// Accessors ...

// CoveredCampaigns returns coveredCampaigns value
func (s *Scheduler) CoveredCampaigns() []campaign.Campaign {
	return s.coveredCampaigns
}

// Utilities ...

// Equal answers whether v is equivalent to s
// Always returns false if v is not a Scheduler
func (s Scheduler) Equal(v interface{}) bool {
	other, ok := v.(Scheduler)
	if !ok {
		return false
	}
	if s.uuid != other.uuid {
		return false
	}
	return s
}

// String implements the fmt.Stringer interface and returns the native format of Scheduler
func (s Scheduler) String() string {
	return fmt.Sprintf("%s ", s.name)
}
