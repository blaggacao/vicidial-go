// GENERATED BY magnum, DO NOT EDIT

package lead

import (
	"fmt"
)

// leadStatusCodes returns all possible leadStatusCodes.
func leadStatusCodes() []leadStatusCode {
	return []leadStatusCode{Loaded(), Queued(), Incoming(), Processed(), Recycled()}
}

// NewleadStatusCode returns the leadStatusCode for the given name.
func NewleadStatusCode(name string) (leadStatusCode, error) {
	switch name {
	case "loaded":
		return Loaded(), nil
	case "queued":
		return Queued(), nil
	case "incoming":
		return Incoming(), nil
	case "processed":
		return Processed(), nil
	case "recycled":
		return Recycled(), nil
	default:
		return leadStatusCode{}, fmt.Errorf("unknown name: %s", name)
	}
}

// Loaded returns the "loaded" leadStatusCode.
func Loaded() leadStatusCode {
	return leadStatusCode{
		name: "loaded",
	}
}

// Queued returns the "queued" leadStatusCode.
func Queued() leadStatusCode {
	return leadStatusCode{
		name: "queued",
	}
}

// Incoming returns the "incoming" leadStatusCode.
func Incoming() leadStatusCode {
	return leadStatusCode{
		name: "incoming",
	}
}

// Processed returns the "processed" leadStatusCode.
func Processed() leadStatusCode {
	return leadStatusCode{
		name: "processed",
	}
}

// Recycled returns the "recycled" leadStatusCode.
func Recycled() leadStatusCode {
	return leadStatusCode{
		name: "recycled",
	}
}

// String returns the leadStatusCode's name.
func (l leadStatusCode) String() string {
	return l.name
}

// MarshalText encodes the receiver into textual form.
func (l leadStatusCode) MarshalText() (text []byte, err error) {
	return []byte(l.String()), nil
}

// UnmarshalText decodes the receiver from its textual form.
func (l *leadStatusCode) UnmarshalText(text []byte) error {
	v, err := NewleadStatusCode(string(text))
	if err != nil {
		return err
	}
	*l = v
	return nil
}
