// GENERATED BY metatag, DO NOT EDIT
// (or edit away - I'm a comment, not a cop)

package lead

import (
	"fmt"
)

// Equal answers whether v is equivalent to l.
// Always returns false if v is not a Lead.
func (l Lead) Equal(v interface{}) bool {
	l2, ok := v.(Lead)
	if !ok {
		return false
	}
	if l.uuid != l2.uuid {
		return false
	}
	return true
}

// String returns the "native" format of Lead. Implements the fmt.Stringer interface.
func (l Lead) String() string {
	return fmt.Sprintf("%v", l.name)
}

// StatusCode returns the value of statusCode.
func (l Lead) StatusCode() leadStatusCode {
	return l.statusCode
}

// SetStatusCode sets the given value as statusCode.
func (l *Lead) SetStatusCode(ll leadStatusCode) {
	l.statusCode = ll
}

// ResultSentinel returns the value of resultSentinel.
func (l Lead) ResultSentinel() string {
	return l.resultSentinel
}

// SetResultSentinel sets the given value as resultSentinel.
func (l *Lead) SetResultSentinel(s string) {
	l.resultSentinel = s
}
