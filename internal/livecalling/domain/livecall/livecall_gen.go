// Code generated by ddd-domain-gen, DO NOT EDIT.
package livecall

import (
	"errors"
	party "github.com/xoe-labs/vicidial-go/internal/common/party"
	"reflect"
	"time"
)

// Generators ...

// New returns a guaranteed-to-be-valid Livecall or an error
func New(meta meta, uuid string, lead party.RemoteParty, localParty party.LocalParty, localPartyHistory []party.LocalParty, startTime time.Time, recording string) (*Livecall, error) {
	if reflect.ValueOf(uuid).IsZero() {
		return nil, errors.New("missing UUID")
	}
	if reflect.ValueOf(lead).IsZero() {
		return nil, errors.New("missing lead")
	}
	l := &Livecall{
		lead:              lead,
		localParty:        localParty,
		localPartyHistory: localPartyHistory,
		meta:              meta,
		recording:         recording,
		startTime:         startTime,
		uuid:              uuid,
	}
	return l, nil
}

// MustNew returns a guaranteed-to-be-valid Livecall or panics
func MustNew(meta meta, uuid string, lead party.RemoteParty, localParty party.LocalParty, localPartyHistory []party.LocalParty, startTime time.Time, recording string) *Livecall {
	l, err := New(meta, uuid, lead, localParty, localPartyHistory, startTime, recording)
	if err != nil {
		panic(err)
	}
	return l
}

// Marshalers ...

// UnmarshalFromRepository unmarshals Livecall from the repository so that non-constructable
// private fields can still be initialized from (private) repository state
//
// Important: DO NEVER USE THIS METHOD EXCEPT FROM THE REPOSITORY
// Reason: This method initializes private state, so you could corrupt the domain.
func UnmarshalFromRepository(meta meta, uuid string, lead party.RemoteParty, localParty party.LocalParty, localPartyHistory []party.LocalParty, startTime time.Time, recording string, endTime time.Time, resultSentinel string) *Livecall {
	l := MustNew(meta, uuid, lead, localParty, localPartyHistory, startTime, recording)
	l.endTime = endTime
	l.resultSentinel = resultSentinel
	return l
}
