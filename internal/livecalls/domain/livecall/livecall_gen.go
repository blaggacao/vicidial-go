// Code generated by ddd-domain-gen, DO NOT EDIT.
package livecall

import (
	"errors"
	party "github.com/blaggacao/vicidial-go/internal/livecalls/domain/party"
	"reflect"
	"time"
)

// Generators ...

// New returns a guaranteed-to-be-valid Livecall or an error
func New(uuid string, agentOrService party.Party, lead party.Party, startTime time.Time) (*Livecall, error) {
	if reflect.ValueOf(uuid).IsZero() {
		return nil, errors.New("missing party UUID")
	}
	if reflect.ValueOf(agentOrService).IsZero() {
		return nil, errors.New("missing agent or service")
	}
	if reflect.ValueOf(lead).IsZero() {
		return nil, errors.New("missing lead")
	}
	if reflect.ValueOf(startTime).IsZero() {
		return nil, errors.New("missing start time")
	}
	l := &Livecall{
		agentOrService: agentOrService,
		lead:           lead,
		startTime:      startTime,
		uuid:           uuid,
	}
	return l, nil
}

// MustNew returns a guaranteed-to-be-valid Livecall or panics
func MustNew(uuid string, agentOrService party.Party, lead party.Party, startTime time.Time) *Livecall {
	l, err := New(uuid, agentOrService, lead, startTime)
	if err != nil {
		panic(err)
	}
	return l
}

// Marshalers ...

// UnmarshalFromRepository unmarshals Livecall from the repository so that non-constructable
// private fields can still be initialized from (private) repository state
//
// Important: DO NEVER USE THIS METHOD EXCEPT FROM THE REPOSITORY
// Reason: This method initializes private state, so you could corrupt the domain.
func UnmarshalFromRepository(uuid string, agentOrService party.Party, lead party.Party, startTime time.Time, endTime time.Time) *Livecall {
	l := MustNew(uuid, agentOrService, lead, startTime)
	l.endTime = endTime
	return l
}
