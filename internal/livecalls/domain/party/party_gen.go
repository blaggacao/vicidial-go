// Code generated by ddd-domain-gen, DO NOT EDIT.
package party

import "errors"

// Generators ...

// New returns a guaranteed-to-be-valid Party or an error
func New(uuid *string, pType *PartyType, name *string, endpointUUID *string) (*Party, error) {
	if uuid == nil {
		return nil, errors.New("missing party UUID")
	}
	if pType == nil {
		return nil, errors.New("missing party type")
	}
	if name == nil {
		return nil, errors.New("missing party name")
	}
	if endpointUUID == nil {
		return nil, errors.New("missing endpoint UUID")
	}
	return &Party{
		endpointUUID: endpointUUID,
		name:         name,
		pType:        pType,
		uuid:         uuid,
	}, nil
}

// MustNew returns a guaranteed-to-be-valid Party or panics
func MustNew(uuid *string, pType *PartyType, name *string, endpointUUID *string) *Party {
	p, err := New(uuid, pType, name, endpointUUID)
	if err != nil {
		panic(err)
	}
	return p
}

// Marshalers ...

// UnmarshalFromRepository unmarshals Party from the repository so that non-constructable
// private fields can still be initialized from (private) repository state
//
// Important: DO NEVER USE THIS METHOD EXCEPT FROM THE REPOSITORY
// Reason: This method initializes private state, so you could corrupt the domain.
func UnmarshalFromRepository(uuid *string, pType *PartyType, name *string, endpointUUID *string) *Party {
	p := MustNew(uuid, pType, name, endpointUUID)
	return p
}

// Getters ...

// Uuid returns uuid value
func (p *Party) Uuid() *string {
	return p.uuid
}

// PType returns pType value
func (p *Party) PType() *PartyType {
	return p.pType
}

// Name returns name value
func (p *Party) Name() *string {
	return p.name
}

// EndpointUUID returns endpointUUID value
func (p *Party) EndpointUUID() *string {
	return p.endpointUUID
}
