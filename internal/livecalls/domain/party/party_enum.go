// GENERATED BY magnum, DO NOT EDIT

package party

import (
	"fmt"
)

// PartyTypes returns all possible PartyTypes.
func PartyTypes() []PartyType {
	return []PartyType{Local(), Remote()}
}

// NewPartyType returns the PartyType for the given name.
func NewPartyType(name string) (PartyType, error) {
	switch name {
	case "local":
		return Local(), nil
	case "remote":
		return Remote(), nil
	default:
		return PartyType{}, fmt.Errorf("unknown name: %s", name)
	}
}

// Local returns the "local" PartyType.
func Local() PartyType {
	return PartyType{
		name: "local",
	}
}

// Remote returns the "remote" PartyType.
func Remote() PartyType {
	return PartyType{
		name: "remote",
	}
}

// String returns the PartyType's name.
func (p PartyType) String() string {
	return p.name
}

// MarshalText encodes the receiver into textual form.
func (p PartyType) MarshalText() (text []byte, err error) {
	return []byte(p.String()), nil
}

// UnmarshalText decodes the receiver from its textual form.
func (p *PartyType) UnmarshalText(text []byte) error {
	v, err := NewPartyType(string(text))
	if err != nil {
		return err
	}
	*p = v
	return nil
}
