// Code generated by ddd-domain-gen, DO NOT EDIT.
package party

import (
	"errors"
	"fmt"
	gouuid "github.com/satori/go.uuid"
	"reflect"
)

// Constructors ...

// New returns a guaranteed-to-be-valid RemoteParty or an error
func New(uuid gouuid.UUID, name string, endpointUUID string) (*RemoteParty, error) {
	if reflect.ValueOf(uuid).IsZero() {
		return nil, errors.New("missing party UUID")
	}
	if reflect.ValueOf(name).IsZero() {
		return nil, errors.New("missing party name")
	}
	if reflect.ValueOf(endpointUUID).IsZero() {
		return nil, errors.New("missing endpoint UUID")
	}
	r := &RemoteParty{
		endpointUUID: endpointUUID,
		name:         name,
		uuid:         uuid,
	}
	return r, nil
}

// MustNew returns a guaranteed-to-be-valid RemoteParty or panics
func MustNew(uuid gouuid.UUID, name string, endpointUUID string) *RemoteParty {
	r, err := New(uuid, name, endpointUUID)
	if err != nil {
		panic(err)
	}
	return r
}

// Marshalers ...

// UnmarshalFromRepository unmarshals RemoteParty from the repository so that non-constructable
// private fields can still be initialized from (private) repository state
//
// Important: DO NEVER USE THIS METHOD EXCEPT FROM THE REPOSITORY
// Reason: This method initializes private state, so you could corrupt the domain.
func UnmarshalFromRepository(uuid gouuid.UUID, name string, endpointUUID string) *RemoteParty {
	r := MustNew(uuid, name, endpointUUID)
	return r
}

// Accessors ...

// Utilities ...

// Equal answers whether v is equivalent to r
// Always returns false if v is not a RemoteParty
func (r RemoteParty) Equal(v interface{}) bool {
	other, ok := v.(RemoteParty)
	if !ok {
		return false
	}
	if r.uuid != other.uuid {
		return false
	}
	return r
}

// String implements the fmt.Stringer interface and returns the native format of RemoteParty
func (r RemoteParty) String() string {
	return fmt.Sprintf("%s ", r.name)
}
